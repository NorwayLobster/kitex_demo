// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package api

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type DaytimeRequest struct {
	ClientDaytime string `thrift:"clientDaytime,1" json:"clientDaytime"`
}

func NewDaytimeRequest() *DaytimeRequest {
	return &DaytimeRequest{}
}

func (p *DaytimeRequest) GetClientDaytime() (v string) {
	return p.ClientDaytime
}
func (p *DaytimeRequest) SetClientDaytime(val string) {
	p.ClientDaytime = val
}

var fieldIDToName_DaytimeRequest = map[int16]string{
	1: "clientDaytime",
}

func (p *DaytimeRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DaytimeRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DaytimeRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClientDaytime = v
	}
	return nil
}

func (p *DaytimeRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DaytimeRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DaytimeRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("clientDaytime", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClientDaytime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DaytimeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DaytimeRequest(%+v)", *p)
}

func (p *DaytimeRequest) DeepEqual(ano *DaytimeRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClientDaytime) {
		return false
	}
	return true
}

func (p *DaytimeRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClientDaytime, src) != 0 {
		return false
	}
	return true
}

type DaytimeResponse struct {
	ServerDaytime string `thrift:"serverDaytime,1" json:"serverDaytime"`
}

func NewDaytimeResponse() *DaytimeResponse {
	return &DaytimeResponse{}
}

func (p *DaytimeResponse) GetServerDaytime() (v string) {
	return p.ServerDaytime
}
func (p *DaytimeResponse) SetServerDaytime(val string) {
	p.ServerDaytime = val
}

var fieldIDToName_DaytimeResponse = map[int16]string{
	1: "serverDaytime",
}

func (p *DaytimeResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DaytimeResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DaytimeResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ServerDaytime = v
	}
	return nil
}

func (p *DaytimeResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DaytimeResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DaytimeResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("serverDaytime", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServerDaytime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DaytimeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DaytimeResponse(%+v)", *p)
}

func (p *DaytimeResponse) DeepEqual(ano *DaytimeResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ServerDaytime) {
		return false
	}
	return true
}

func (p *DaytimeResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ServerDaytime, src) != 0 {
		return false
	}
	return true
}

type ServiceNameDaytimeInThriftFile interface {
	Daytime(ctx context.Context, req *DaytimeRequest) (r *DaytimeResponse, err error)
}

type ServiceNameDaytimeInThriftFileClient struct {
	c thrift.TClient
}

func NewServiceNameDaytimeInThriftFileClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ServiceNameDaytimeInThriftFileClient {
	return &ServiceNameDaytimeInThriftFileClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewServiceNameDaytimeInThriftFileClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ServiceNameDaytimeInThriftFileClient {
	return &ServiceNameDaytimeInThriftFileClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewServiceNameDaytimeInThriftFileClient(c thrift.TClient) *ServiceNameDaytimeInThriftFileClient {
	return &ServiceNameDaytimeInThriftFileClient{
		c: c,
	}
}

func (p *ServiceNameDaytimeInThriftFileClient) Client_() thrift.TClient {
	return p.c
}

func (p *ServiceNameDaytimeInThriftFileClient) Daytime(ctx context.Context, req *DaytimeRequest) (r *DaytimeResponse, err error) {
	var _args ServiceNameDaytimeInThriftFileDaytimeArgs
	_args.Req = req
	var _result ServiceNameDaytimeInThriftFileDaytimeResult
	if err = p.Client_().Call(ctx, "daytime", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ServiceNameDaytimeInThriftFileProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ServiceNameDaytimeInThriftFile
}

func (p *ServiceNameDaytimeInThriftFileProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ServiceNameDaytimeInThriftFileProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ServiceNameDaytimeInThriftFileProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewServiceNameDaytimeInThriftFileProcessor(handler ServiceNameDaytimeInThriftFile) *ServiceNameDaytimeInThriftFileProcessor {
	self := &ServiceNameDaytimeInThriftFileProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("daytime", &serviceNameDaytimeInThriftFileProcessorDaytime{handler: handler})
	return self
}
func (p *ServiceNameDaytimeInThriftFileProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type serviceNameDaytimeInThriftFileProcessorDaytime struct {
	handler ServiceNameDaytimeInThriftFile
}

func (p *serviceNameDaytimeInThriftFileProcessorDaytime) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ServiceNameDaytimeInThriftFileDaytimeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("daytime", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ServiceNameDaytimeInThriftFileDaytimeResult{}
	var retval *DaytimeResponse
	if retval, err2 = p.handler.Daytime(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing daytime: "+err2.Error())
		oprot.WriteMessageBegin("daytime", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("daytime", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ServiceNameDaytimeInThriftFileDaytimeArgs struct {
	Req *DaytimeRequest `thrift:"req,1" json:"req"`
}

func NewServiceNameDaytimeInThriftFileDaytimeArgs() *ServiceNameDaytimeInThriftFileDaytimeArgs {
	return &ServiceNameDaytimeInThriftFileDaytimeArgs{}
}

var ServiceNameDaytimeInThriftFileDaytimeArgs_Req_DEFAULT *DaytimeRequest

func (p *ServiceNameDaytimeInThriftFileDaytimeArgs) GetReq() (v *DaytimeRequest) {
	if !p.IsSetReq() {
		return ServiceNameDaytimeInThriftFileDaytimeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ServiceNameDaytimeInThriftFileDaytimeArgs) SetReq(val *DaytimeRequest) {
	p.Req = val
}

var fieldIDToName_ServiceNameDaytimeInThriftFileDaytimeArgs = map[int16]string{
	1: "req",
}

func (p *ServiceNameDaytimeInThriftFileDaytimeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServiceNameDaytimeInThriftFileDaytimeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ServiceNameDaytimeInThriftFileDaytimeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ServiceNameDaytimeInThriftFileDaytimeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewDaytimeRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ServiceNameDaytimeInThriftFileDaytimeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("daytime_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ServiceNameDaytimeInThriftFileDaytimeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ServiceNameDaytimeInThriftFileDaytimeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceNameDaytimeInThriftFileDaytimeArgs(%+v)", *p)
}

func (p *ServiceNameDaytimeInThriftFileDaytimeArgs) DeepEqual(ano *ServiceNameDaytimeInThriftFileDaytimeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ServiceNameDaytimeInThriftFileDaytimeArgs) Field1DeepEqual(src *DaytimeRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ServiceNameDaytimeInThriftFileDaytimeResult struct {
	Success *DaytimeResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewServiceNameDaytimeInThriftFileDaytimeResult() *ServiceNameDaytimeInThriftFileDaytimeResult {
	return &ServiceNameDaytimeInThriftFileDaytimeResult{}
}

var ServiceNameDaytimeInThriftFileDaytimeResult_Success_DEFAULT *DaytimeResponse

func (p *ServiceNameDaytimeInThriftFileDaytimeResult) GetSuccess() (v *DaytimeResponse) {
	if !p.IsSetSuccess() {
		return ServiceNameDaytimeInThriftFileDaytimeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ServiceNameDaytimeInThriftFileDaytimeResult) SetSuccess(x interface{}) {
	p.Success = x.(*DaytimeResponse)
}

var fieldIDToName_ServiceNameDaytimeInThriftFileDaytimeResult = map[int16]string{
	0: "success",
}

func (p *ServiceNameDaytimeInThriftFileDaytimeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServiceNameDaytimeInThriftFileDaytimeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ServiceNameDaytimeInThriftFileDaytimeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ServiceNameDaytimeInThriftFileDaytimeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDaytimeResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ServiceNameDaytimeInThriftFileDaytimeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("daytime_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ServiceNameDaytimeInThriftFileDaytimeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ServiceNameDaytimeInThriftFileDaytimeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceNameDaytimeInThriftFileDaytimeResult(%+v)", *p)
}

func (p *ServiceNameDaytimeInThriftFileDaytimeResult) DeepEqual(ano *ServiceNameDaytimeInThriftFileDaytimeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ServiceNameDaytimeInThriftFileDaytimeResult) Field0DeepEqual(src *DaytimeResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
